volumes:
    certs:
        driver: local
    esdata-coord:
        driver: local
    es-data-01:
        driver: local
    es-data-02:
        driver: local
    es-data-03:
        driver: local
    kibana-data-01:
        driver: local
    kibana-data-02:
        driver: local

networks:
    elastic_network:
        driver: bridge
    kafka_network:
        driver: bridge

services:
    setup:
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        networks:
            - elastic_network
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
        user: "0"
        command: >
            bash -c '
              if [ x${ES_PASSWORD} == x ]; then
                echo "Set the ES_PASSWORD environment variable in the .env file";
                exit 1;
              elif [ x${KIBANA_PASSWORD} == x ]; then
                echo "Set the KIBANA_PASSWORD environment variable in the .env file";
                exit 1;
              fi;
              if [ ! -f config/certs/ca.zip ]; then
                echo "Creating CA";
                bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
                unzip config/certs/ca.zip -d config/certs;
              fi;
              if [ ! -f config/certs/certs.zip ]; then
                echo "Creating certs";
                echo -ne \
                "instances:\n"\
                "  - name: es-coord\n"\
                "    dns:\n"\
                "      - es-coord\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "  - name: es-masternode-01\n"\
                "    dns:\n"\
                "      - es-masternode-01\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "  - name: es-masternode-02\n"\
                "    dns:\n"\
                "      - es-masternode-02\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "  - name: es-masternode-03\n"\
                "    dns:\n"\
                "      - es-masternode-03\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "  - name: kibana-01\n"\
                "    dns:\n"\
                "      - kibana-01\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "  - name: kibana-02\n"\
                "    dns:\n"\
                "      - kibana-02\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "  - name: logstash\n"\
                "    dns:\n"\
                "      - logstash\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                "  - name: nginx\n"\
                "    dns:\n"\
                "      - nginx\n"\
                "      - nginx\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                > config/certs/instances.yml;
                bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
                unzip config/certs/certs.zip -d config/certs;
              fi;
              # Ensure Kibana certificates are moved to the correct directory
              if [ ! -d config/certs/kibana ]; then
                mkdir -p config/certs/kibana;
              fi;
              mv config/certs/kibana-01/* config/certs/kibana/;
              mv config/certs/kibana-02/* config/certs/kibana/;
              echo "Setting file permissions"
              chown -R root:root config/certs;
              find . -type d -exec chmod 750 \{\} \;;
              find . -type f -exec chmod 640 \{\} \;;
              echo "Waiting for Elasticsearch availability";
              until curl -s --cacert config/certs/ca/ca.crt https://es-coord:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
              echo "Setting kibana_system password";
              until curl -s -X POST --cacert config/certs/ca/ca.crt -u "${ES_USER}:${ES_PASSWORD}" -H "Content-Type: application/json" https://es-coord:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
              echo "All done!";
            '
        healthcheck:
            test: ["CMD-SHELL", "[ -f config/certs/es-coord/es-coord.crt ]"]
            interval: 1s
            timeout: 5s
            retries: 120

    es-coord:
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        hostname: sheild-es-coord
        container_name: marvel-es-coord
        depends_on:
            setup:
                condition: service_healthy
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
            - esdata-coord:/usr/share/elasticsearch/data
        ports:
            - ${ES_PORT}:${ES_PORT}
        networks:
            - elastic_network
        environment:
            - node.name=es-coord
            - node.roles=!!seq ""
            - cluster.name=${CLUSTER_NAME}
            - cluster.initial_master_nodes=es-masternode-01,es-masternode-02,es-masternode-03
            - discovery.seed_hosts=es-masternode-01,es-masternode-02,es-masternode-03
            - ELASTIC_PASSWORD=${ES_PASSWORD}
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/es-coord/es-coord.key
            - xpack.security.http.ssl.certificate=certs/es-coord/es-coord.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/es-coord/es-coord.key
            - xpack.security.transport.ssl.certificate=certs/es-coord/es-coord.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${LICENSE}
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
        mem_limit: ${ES_MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test:
                [
                   "CMD-SHELL",
                   "curl -s --cacert config/certs/ca/ca.crt https://es-coord:${ES_PORT} | grep -q 'missing authentication credentials'"
                ]
            interval: 10s
            timeout: 10s
            retries: 120

    es-masternode-01:
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        hostname: sheild-es-masternode-01
        container_name: marvel-es-masternode-01
        depends_on:
            es-coord:
                condition: service_healthy
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
            - es-data-01:/usr/share/elasticsearch/data
        networks:
            - elastic_network
        ports:
            - 9201:${ES_PORT}
        environment:
            - node.name=es-masternode-01
            - node.roles=master,data
            - cluster.name=${CLUSTER_NAME}
            - cluster.initial_master_nodes=es-masternode-01,es-masternode-02,es-masternode-03
            - discovery.seed_hosts=es-masternode-01,es-masternode-02,es-masternode-03
            - ELASTIC_PASSWORD=${ES_PASSWORD}
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/es-masternode-01/es-masternode-01.key
            - xpack.security.http.ssl.certificate=certs/es-masternode-01/es-masternode-01.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/es-masternode-01/es-masternode-01.key
            - xpack.security.transport.ssl.certificate=certs/es-masternode-01/es-masternode-01.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${LICENSE}
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
        mem_limit: ${ES_MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test:
                [
                   "CMD-SHELL",
                   "curl -s --cacert config/certs/ca/ca.crt https://sheild-es-masternode-01:${ES_PORT} | grep -q 'missing authentication credentials'"
                ]
            interval: 10s
            timeout: 10s
            retries: 120

    es-masternode-02:
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        hostname: sheild-es-masternode-02
        container_name: marvel-es-masternode-02
        depends_on:
            es-coord:
                condition: service_healthy
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
            - es-data-02:/usr/share/elasticsearch/data
        networks:
            - elastic_network
        ports:
            - 9202:${ES_PORT}
        environment:
            - node.name=es-masternode-02
            - node.roles=master,data
            - cluster.name=${CLUSTER_NAME}
            - cluster.initial_master_nodes=es-masternode-01,es-masternode-02,es-masternode-03
            - discovery.seed_hosts=es-masternode-01,es-masternode-02,es-masternode-03
            - ELASTIC_PASSWORD=${ES_PASSWORD}
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/es-masternode-02/es-masternode-02.key
            - xpack.security.http.ssl.certificate=certs/es-masternode-02/es-masternode-02.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/es-masternode-02/es-masternode-02.key
            - xpack.security.transport.ssl.certificate=certs/es-masternode-02/es-masternode-02.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${LICENSE}
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
        mem_limit: ${ES_MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test:
                [
                   "CMD-SHELL",
                   "curl -s --cacert config/certs/ca/ca.crt https://sheild-es-masternode-02:${ES_PORT} | grep -q 'missing authentication credentials'"
                ]
            interval: 10s
            timeout: 10s
            retries: 120

    es-masternode-03:
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        hostname: sheild-es-masternode-03
        container_name: marvel-es-masternode-03
        depends_on:
            es-coord:
                condition: service_healthy
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
            - es-data-03:/usr/share/elasticsearch/data
        networks:
            - elastic_network
        ports:
            - 9203:${ES_PORT}
        environment:
            - node.name=es-masternode-03
            - node.roles=master,data
            - cluster.name=${CLUSTER_NAME}
            - cluster.initial_master_nodes=es-masternode-01,es-masternode-02,es-masternode-03
            - discovery.seed_hosts=es-masternode-01,es-masternode-02,es-masternode-03
            - ELASTIC_PASSWORD=${ES_PASSWORD}
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/es-masternode-03/es-masternode-03.key
            - xpack.security.http.ssl.certificate=certs/es-masternode-03/es-masternode-03.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/es-masternode-03/es-masternode-03.key
            - xpack.security.transport.ssl.certificate=certs/es-masternode-03/es-masternode-03.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${LICENSE}
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
        mem_limit: ${ES_MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test:
                [
                   "CMD-SHELL",
                   "curl -s --cacert config/certs/ca/ca.crt https://sheild-es-masternode-03:${ES_PORT} | grep -q 'missing authentication credentials'"
                ]
            interval: 10s
            timeout: 10s
            retries: 120

    kibana-01:
        image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
        hostname: sheild-kibana-01
        container_name: marvel-kibana-01
        depends_on:
            es-coord:
                condition: service_healthy
        volumes:
            - certs:/usr/share/kibana/config/certs
            - kibana-data-01:/usr/share/kibana/data
        networks:
            - elastic_network
        ports:
            - ${KIBANA_PORT}:${KIBANA_PORT}
        environment:
            - SERVER_NAME=kibana
            - ELASTICSEARCH_HOSTS=https://es-coord:${ES_PORT}
            - ELASTICSEARCH_USERNAME=${KIBANA_USER}
            - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
            - SERVER_SSL_ENABLED=true
            - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana-01.crt
            - SERVER_SSL_KEY=config/certs/kibana/kibana-01.key
            - SERVER_SSL_CERTIFICATE_AUTHORITIES=config/certs/ca/ca.crt
            - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
            - SERVER_PUBLICBASEURL=https://kibana-01:${KIBANA_PORT}
        mem_limit: ${KB_MEM_LIMIT}
        healthcheck:
            test:
                [
                   "CMD-SHELL",
                   "curl -s --cacert /usr/share/kibana/config/certs/kibana/kibana-01.crt --fail --insecure -o /dev/null https://sheild-kibana-01:${KIBANA_PORT} || exit 1"
                ]
            interval: 10s
            timeout: 10s
            retries: 300

    kibana-02:
        image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
        hostname: sheild-kibana-02
        container_name: marvel-kibana-02
        depends_on:
            es-coord:
                condition: service_healthy
        volumes:
            - certs:/usr/share/kibana/config/certs
            - kibana-data-02:/usr/share/kibana/data
        networks:
            - elastic_network
        ports:
            - 5602:${KIBANA_PORT}
        environment:
            - SERVER_NAME=kibana
            - ELASTICSEARCH_HOSTS=https://es-coord:${ES_PORT}
            - ELASTICSEARCH_USERNAME=${KIBANA_USER}
            - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
            - SERVER_SSL_ENABLED=true
            - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana-02.crt
            - SERVER_SSL_KEY=config/certs/kibana/kibana-02.key
            - SERVER_SSL_CERTIFICATE_AUTHORITIES=config/certs/ca/ca.crt
            - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
            - SERVER_PUBLICBASEURL=https://kibana-02:${KIBANA_PORT}
        mem_limit: ${KB_MEM_LIMIT}
        healthcheck:
            test:
                [
                   "CMD-SHELL",
                   "curl -s --cacert /usr/share/kibana/config/certs/kibana/kibana-01.crt --fail --insecure -o /dev/null https://sheild-kibana-02:${KIBANA_PORT} || exit 1"
                ]
            interval: 10s
            timeout: 10s
            retries: 300

    logstash:
        build:
            context: ./logstash
            dockerfile: Dockerfile
        hostname: sheild-logstash
        container_name: marvel-logstash
        depends_on:
            es-coord:
                condition: service_healthy
            kafka:
                condition: service_healthy
        labels:
            co.elastic.logs/module: logstash
        user: root
        volumes:
            - certs:/usr/share/logstash/config/certs
        networks:
            - elastic_network
            - kafka_network
        ports:
            - 5044:5044
        environment:
            - NODE_NAME="logstash"
            - xpack.monitoring.enabled=false
            - LS_JAVA_OPTS=-Xmx1g -Xms1g
        command: logstash -f /usr/share/logstash/pipeline/logstash.conf
        healthcheck:
            test: ["CMD-SHELL", "curl --cacert /usr/share/logstash/config/certs/ca.crt https://logstash:${ES_PORT} -u ${ES_USER}:${ES_PASSWORD} -o /dev/null -w \"%{http_code}\" -s | grep -q 200"]
            interval: 10s
            timeout: 10s
            retries: 3

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        hostname: sheild-zookeeper
        container_name: marvel-zookeeper
        environment:
            - ZOOKEEPER_CLIENT_PORT=${ZK_PORT}
            - ZOOKEEPER_TICK_TIME=2000
        ports:
            - ${ZK_PORT}:${ZK_PORT}
        networks:
            - kafka_network
        healthcheck:
          test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181" ]
          interval: 10s
          retries: 3
          start_period: 30s
          timeout: 5s

    kafka:
        hostname: sheild-kafka
        container_name: marvel-kafka
        depends_on:
            zookeeper:
                condition: service_healthy
        image: confluentinc/cp-kafka:latest
        ports:
            - ${KAFKA_PORT}:${KAFKA_PORT}
        environment:
            - KAFKA_BROKER_ID=1
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper:${ZK_PORT}
            - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_BOOTSTRAP_SERVERS},PLAINTEXT_HOST://localhost:29092
            - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
            - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
        command: sh -c "((sleep 120 && kafka-topics --create --topic ${KAFKA_TOPIC_1} --bootstrap-server ${KAFKA_BOOTSTRAP_SERVERS} --partitions 1 --replication-factor 1)&) && /etc/confluent/docker/run ">
        networks:
            - kafka_network
        healthcheck:
            test: ["CMD-SHELL", "nc -z kafka ${KAFKA_PORT} || exit 1"]
            interval: 30s
            retries: 3
            start_period: 60s
            timeout: 10s

    banking-app:
        hostname: sheild-banking-app
        container_name: marvel-banking-app
        depends_on:
            kafka:
                condition: service_healthy
        build:
            context: ./banking
            dockerfile: Dockerfile
        networks:
            - kafka_network
        working_dir: /usr/src/app
        environment:
            - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
            - KAFKA_TOPIC=${KAFKA_TOPIC_1}
        command: ["python3", "/usr/src/app/banking_app.py"]
        healthcheck:
            test: ["CMD-SHELL", "nc -z kafka ${KAFKA_PORT} || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

